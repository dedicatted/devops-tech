name: Terratests

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at midnight UTC

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV

      - name: Testing terraform-aws-eks
        run: |
          mkdir deploy
          cd deploy
          touch main.tf
          cat <<EOL >> main.tf
          data "aws_caller_identity" "current" {}

          output "private_subnets"{
            value = module.vpc.private_subnets
          }

          output "vpc_id"{
            value = module.vpc.vpc_id
          }

          output "key_arn"{
            value = module.kms.key_arn
          }

          module "kms" {
            source      = "./../terraform/aws/modules/terraform-aws-kms"
            description = "Customer managed key to encrypt EKS managed node group volumes"
            deletion_window_in_days = 7
            key_administrators = [
              data.aws_caller_identity.current.arn
            ]
            key_service_roles_for_autoscaling = [
              "arn:aws:iam::\${data.aws_caller_identity.current.account_id}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling",
            ]
          }

          module "vpc" {
            source                             = "./../terraform/aws/modules/terraform-aws-vpc"
            name                               = "\${var.env_name}-vpc"
            cidr                               = var.cidr
            azs                                = ["\${var.region}a", "\${var.region}b", "\${var.region}c"]
            private_subnets                    = [cidrsubnet(var.cidr, 8, 0), cidrsubnet(var.cidr, 8, 1), cidrsubnet(var.cidr, 8, 2)]
            public_subnets                     = [cidrsubnet(var.cidr, 8, 3), cidrsubnet(var.cidr, 8, 4), cidrsubnet(var.cidr, 8, 5)]
            create_elasticache_subnet_group    = false
            create_database_subnet_group       = false
            create_database_subnet_route_table = false
            create_egress_only_igw             = true
            enable_nat_gateway                 = true
            single_nat_gateway                 = true
            enable_dns_hostnames               = true
            public_subnet_tags = {
              "kubernetes.io/cluster/\${var.env_name}-eks" = "shared"
              "kubernetes.io/role/elb"                    = 1
            }
            private_subnet_tags = {
              "kubernetes.io/cluster/\${var.env_name}-eks" = "shared"
              "kubernetes.io/role/internal-elb"           = 1
            }
          }
          EOL
          
          touch variable.tf
          cat <<EOL >> variables.tf
          variable "env_name" {
            default = "test" 
          }
          variable "cidr" {
            description = "(Optional) The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using ipv4_netmask_length & ipv4_ipam_pool_id"
            type        = string
            default     = "10.0.0.0/16"
          }
          variable "region" {
            default = "us-east-1"
          }
          EOL

          terraform init
          terraform apply --auto-approve

          touch terraform.tfvars
          echo "private_subnets=$(terraform output private_subnets)" >> terraform.tfvars
          echo "kms_key_arn=$(terraform output key_arn)" >> terraform.tfvars
          echo "vpc_id=$(terraform output vpc_id)" >> terraform.tfvars
          mv terraform.tfvars ../terraform/aws/modules/terraform-aws-eks

          cd ..
          cd terraform/aws/modules/terraform-aws-eks
          go mod init "eks"
          go mod tidy
          go test -timeout 30m

          terraform init
          terraform apply --auto-approve

          echo "oidc_provider_arn=$(terraform output oidc_provider_arn)" >> terraform.tfvars
          echo "cluster_name=$(terraform output cluster_name)" >> terraform.tfvars
          cp terraform.tfvars ../terraform/aws/modules/terraform-aws-eks-addons
          
          cd ../terraform-aws-eks-addons
          go mod init "eks-addons"
          go mod tidy
          go test -timeout 30m
          
          cd ../terraform-aws-eks
          terraform destroy --auto-approve
          cd ../../../../deploy
          terraform destroy --auto-approve
          cd ..